---
version: 2

workflows:
  version: 2
  build_linux:
    jobs:
      - build

jobs:
  build:
    working_directory: ~/work
    docker:
      - image: ubuntu:20.04

    steps:
      - run: &apt_install
          apt update &&
          export DEBIAN_FRONTEND=noninteractive ; apt install -y --no-install-recommends
            cmake
            sudo
            gcc g++
            libconfig-dev
            libgtest-dev
            ninja-build
            pkg-config
            zip grep file ca-certificates autotools-dev autoconf automake
            git bc wget rsync cmake make pkg-config libtool
            ssh gzip tar unzip
            coreutils
            expect
            astyle

      - checkout

      - run: &apt_install
          export DEBIAN_FRONTEND=noninteractive ; apt install -y --no-install-recommends clang-11
      - run: dpkg -l | grep clang
      - run: type -a clang-11
      - run: clang-11 --version

# ----  compile ---
      -  run:
          command: |
            add_config_flag() { CONFIG_FLAGS="$CONFIG_FLAGS $@";    }
            add_c_flag()      { C_FLAGS="$C_FLAGS $@";              }
            add_cxx_flag()    { CXX_FLAGS="$CXX_FLAGS $@";          }
            add_ld_flag()     { LD_FLAGS="$LD_FLAGS $@";            }
            add_flag()        { add_c_flag "$@"; add_cxx_flag "$@"; }
            unset CONFIG_FLAGS
            unset C_FLAGS
            unset CXX_FLAGS
            unset LD_FLAGS
            unset CFLAGS
            unset CXXFLAGS
            unset CPPFLAGS
            unset LDFLAGS

            add_flag -O2 -march=native
            add_c_flag -pedantic
            # add_c_flag -std=c99
            add_flag -g3
            add_flag -ftrapv
            # Add all warning flags we can.
            add_flag -Wall
            add_flag -Wextra
            add_flag -Weverything
            add_flag -Werror
            add_flag -fdiagnostics-color=always
            add_flag -fno-omit-frame-pointer
            add_flag -fsanitize=address

            clang-11 $C_FLAGS -g -D LINUX pwstore.c -o pwstore
# ----  compile ---

      - run: ldd pwstore
      - run: ls -hal pwstore

# ---- install ----
      - run: sudo mkdir -p /opt/pwstore
      - run: sudo chmod a+rx /opt/pwstore
      - run: sudo chmod u+rwx /opt/pwstore
      - run: sudo chmod og-w /opt/pwstore

      - run: sudo mkdir -p /opt/pwstore/bin
      - run: sudo chmod u+rwx /opt/pwstore/bin
      - run: sudo chmod og-rw /opt/pwstore/bin
      - run: sudo chmod og+x /opt/pwstore/bin

      - run: sudo mkdir -p /opt/pwstore/conf
      - run: sudo chmod u+rwx /opt/pwstore/conf
      - run: sudo chmod og-rwx /opt/pwstore/conf

      - run: sudo cp -av pwstore /opt/pwstore/bin/pwstore
      - run: sudo chown root:root /opt/pwstore/bin/pwstore
      - run: sudo chmod og-rw /opt/pwstore/bin/pwstore
      - run: sudo chmod og+x /opt/pwstore/bin/pwstore
      - run: sudo chmod u+rwx /opt/pwstore/bin/pwstore
      - run: sudo chmod u+s /opt/pwstore/bin/pwstore

      - run: sudo ls -ald /opt/pwstore
      - run: sudo ls -alR /opt/pwstore
# ---- install ----

# ----   test  ----
      - run: /opt/pwstore/bin/pwstore

      - run: /opt/pwstore/bin/pwstore list
      - run: /opt/pwstore/bin/pwstore read test1 test2 || exit 0 # expect an error here, but not a crash!

      - run: printf '#!/usr/bin/expect\nset timeout -1\nspawn "/opt/pwstore/bin/pwstore" add test1 test2\nset force_conservative 0\nset send_slow {1 .1}\nexpect "password:"\nsleep .1\nsend -- "password123ladfmweuiorjwiajriwjrwj\\r"\nexpect "again:"\nsleep .1\nsend -- "password123ladfmweuiorjwiajriwjrwj\\r"\nexpect eof\n' > ~/tt.sh
      - run: cat ~/tt.sh
      - run: expect ~/tt.sh
      - run: /opt/pwstore/bin/pwstore list
      - run: /opt/pwstore/bin/pwstore read test1 test2
# ----   test  ----

      - store_artifacts:
          path: ~/work/pwstore
          destination: pwstore.am64.linux
